---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { formatDate } from "../../utils/dates";
import type { Post } from "../../types";
import { calculateReadingTime } from "../../utils/misc";
import Comments from "../../components/Comments.vue";

interface Props {
	post: CollectionEntry<"posts">;
}

export async function getStaticPaths() {
	const blogPosts = await getCollection("posts");
	return blogPosts.map((post: Post) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

const { post } = Astro.props;
const { Content } = await post.render();
const hasImage = post.data.cover;
const isDraft = post.data.draft;
const readingTime = calculateReadingTime(post.body);

const date = new Date(post.data.date);
const formattedDate = formatDate(date);
---

<script>
	const copyButtonLabel = "Copy";

	document.querySelectorAll("pre").forEach((codeBlock) => {
		addCopyButton(codeBlock);
	});

	function addCopyButton(codeBlock: HTMLElement) {
		const wrapper = document.createElement("div");
		wrapper.style.position = "relative";

		const copyButton = document.createElement("button");
		copyButton.className = "copy-code";
		copyButton.textContent = copyButtonLabel;

		codeBlock.setAttribute("tabindex", "0");

		codeBlock.parentNode?.insertBefore(wrapper, codeBlock);
		wrapper.appendChild(codeBlock);
		wrapper.appendChild(copyButton);

		copyButton.addEventListener("click", () =>
			handleCopy(codeBlock, copyButton),
		);
	}

	async function handleCopy(
		codeBlock: HTMLElement,
		button: HTMLButtonElement,
	) {
		const codeElement = codeBlock.querySelector("code");
		if (!codeElement) return;

		// Copy text content to clipboard
		await navigator.clipboard.writeText(codeElement.innerText);

		// Update button text temporarily
		button.textContent = "Copied";
		setTimeout(() => {
			button.textContent = copyButtonLabel;
		}, 900);
	}
</script>

<Layout title={post.data.title}>
	<div class="flex flex-col items-center justify-center min-h-screen mt-8">
		<article class="prose dark:prose-invert prose-stone w-full max-w-3xl">
			{
				hasImage && (
					<Image
						class="object-cover object-center !m-0 aspect-square block"
						src={post.data.cover}
						alt={post.data.title}
						width={600}
						height={600}
					/>
				)
			}
			<h1 id="title">
				{post.data.title}
			</h1>
			<a id="post-date">
				{formattedDate} -
				<span id="reading-time" class="ml-1">
					{readingTime} m read
				</span>
			</a>
			{
				isDraft && (
					<div
						class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 pl-2 my-4 dark:bg-yellow-900 dark:border-yellow-500 dark:text-yellow-200"
						role="alert"
					>
						<p class="font-bold">Note:</p>
						<p>This post is still in progress.</p>
					</div>
				)
			}
			<div id="post-content">
				<Content />
			</div>
		</article>
		<Comments client:load title={post.data.title} />
	</div>
</Layout>

<style>
	#title {
        font-family: "Noto Serif Regular";
		/* font-family: "Sorts Mill Goudy"; */
		font-size: 30px;
		margin-bottom: 4px;
	}

	#post-date {
		font-family: "IBM Plex Mono", monospace;
		font-size: 16px;
		font-weight: 400;
		color: #929292;
		text-decoration: none;
	}

	.prose {
		font-family: "IBM Plex Mono", monospace;
		/* font-family: "Inter", sans-serif; */
		/* font-family: "Montserrat", sans-serif; */
		/* font-family: "Sorts Mill Goudy", serif; */
		font-size: 16px;
		max-width: none;
		overflow-wrap: break-word;
	}
	:global(.prose pre) {
	  position: relative;
	  padding-top: 2rem;
	}

	:global(.copy-code) {
	  position: absolute;
	  top: 0.5rem;
	  right: 0.5rem;
	  z-index: 10;
	}

</style>
