---
import type { Language } from "../pages/api/getGithubRepository";

type Props = {
	languages: Language[];
	projectUrl: string;
};

const { languages, projectUrl } = Astro.props;
---

<div
	class="w-full sm:w-[calc(100%-2rem)] bg-gray-200 rounded-full md:h-2 h-3 dark:bg-gray-700 relative"
>
	{
		languages.reduce(
			(acc, lang, index) => {
				let style = "";

				const roundPercent =
					Math.floor(lang.percent) === lang.percent
						? lang.percent
						: lang.percent.toFixed(2);

				if (languages.length === 1) {
					style = "rounded-full";
				} else if (index === 0) {
					style = "rounded-l-full";
				} else if (index === languages.length - 1) {
					style = "rounded-r-full";
				} else {
					style = "border-l-2 border-gray-200 dark:border-gray-700";
				}

				const langUrl = projectUrl.concat(`/search?l=${lang.name}`);

				const bar = (
					<div class="language-bar">
						<a href={langUrl} target="_blank" rel="noopener">
							<div
								class={`h-3 md:h-2 absolute ${style} hover:brightness-125`}
								style={{
									width: `${lang.percent}%`,
									backgroundColor: lang.color,
									left: `${acc.position}%`,
								}}
							/>
						</a>
						<div
							class="tooltip bg-gray-50 text-black border-black dark:bg-black dark:text-white dark:border-white text-xs border-2"
							style={{
								left: `${acc.position + lang.percent / 2}%`,
							}}
						>
							{`${lang.name} ${roundPercent}%`}
						</div>
					</div>
				);

				return {
					bars: acc.bars.concat(bar),
					position: acc.position + lang.percent,
				};
			},
			{ bars: [], position: 0 },
		).bars
	}
</div>

<style>
	.language-bar {
		position: relative;
	}

	.tooltip {
		display: block;
		position: absolute;
		bottom: 100%;
		left: 50%;
		transform: translateX(-50%);
		padding: 2px 4px;
		white-space: nowrap;
		transition:
			opacity 0s ease 0.1s,
			visibility 0s 0.1s;
		opacity: 0;
		visibility: hidden;
		pointer-events: none;
		margin-bottom: 5px;
		border-radius: 6px;
	}

	.language-bar:hover .tooltip {
		opacity: 1;
		visibility: visible;
		transition-delay: 0s;
	}
</style>
